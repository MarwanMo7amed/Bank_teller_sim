/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Problem1;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author apple
 */
public class Simulation_Tab extends javax.swing.JFrame {

    /**
     * Creates new form Simulation_Tab
     */
    public static int custNum;
    public static double AvgServ=0;
    public static double AvgOrdWait=0;
    public static double AvgDisWait=0;
    public static double AvgWait=0;
    public static double ordWaitProb;
    public static double DisWaitProb;
    public static double IdlePortion=0;
    public static double ordC=0,vipC=0;
    public static double ordWC=0,vipWC=0;
    public static double avgServOrd=0,avgServVip=0;
    public static simulation_table simTable=new simulation_table();
    public Simulation_Tab() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer", "Inter arrival time", "Arrival Time", "Service Time", "Time Service begin", "Waiting time in queue", "Time service ends", "Time customer spend in system", "IDLE server", "  Customer type "
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Simulation Table");

        jButton1.setText("Show Avg Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int ordMaxQueue, DisMaxQeue;
        //looping on simulation table to calculate required average values
        for (int i = 0; i < simTable.Sim_Table.size(); i++) 
        {
            AvgServ+=simTable.Sim_Table.get(i).ServiceTime*simTable.Sim_Table.get(i).serviceProb;
            if(simTable.Sim_Table.get(i).CustomerType.equals("Ordinary"))
            {
                ordC++;
                AvgOrdWait+=simTable.Sim_Table.get(i).WaitingTime;
                avgServOrd+=simTable.Sim_Table.get(i).ServiceTime*simTable.Sim_Table.get(i).serviceProb;
                if(simTable.Sim_Table.get(i).WaitingTime>0)
                {
                    ordWC++;
                }
            }
            if(simTable.Sim_Table.get(i).IDLE_Time>0)
            {
                IdlePortion++;
            }
            if(simTable.Sim_Table.get(i).CustomerType.equals("distinguished"))
            {
                vipC++;
                AvgDisWait+=simTable.Sim_Table.get(i).WaitingTime;
                avgServVip+=simTable.Sim_Table.get(i).ServiceTime*simTable.Sim_Table.get(i).serviceProb;
                if(simTable.Sim_Table.get(i).WaitingTime>0)
                {
                    vipWC++;
                }
            }
            AvgWait+=simTable.Sim_Table.get(i).WaitingTime;
        }
        //max queue length of ordinary
        int ordc2=0,vipc2=0;
        for (int i = 0; i < simTable.Sim_Table.size(); i++) 
        {
            int curr=1;
            for (int j = i+1; j < simTable.Sim_Table.size(); j++) {
                if(simTable.Sim_Table.get(i).CustomerType.equals("Ordinary") && simTable.Sim_Table.get(i).WaitingTime>0 &&simTable.Sim_Table.get(i+1).CustomerType.equals("Ordinary") && simTable.Sim_Table.get(i+1).WaitingTime>0)
                {
                    curr++;
                }
                else
                    break;
                if(curr>ordc2)
                    ordc2=curr;
            }
        }
        //max queue length of distinguished
        for (int i = 0; i < simTable.Sim_Table.size(); i++) 
        {
            int curr=1;
            for (int j = i+1; j < simTable.Sim_Table.size(); j++) {
                if(simTable.Sim_Table.get(i).CustomerType.equals("distinguished") && simTable.Sim_Table.get(i).WaitingTime>0 && simTable.Sim_Table.get(i+1).CustomerType.equals("distinguished") && simTable.Sim_Table.get(i+1).WaitingTime>0)
                {
                    curr++;
                }
                else
                    break;
                if(curr>vipc2)
                    vipc2=curr;
            }
        }
        // average service
        AvgServ/=simTable.Sim_Table.size();
        //average wait time for ordinary
        AvgOrdWait/=ordC;
        //average wait time for distinguished
        AvgDisWait/=vipC;
        //average wait in the whole system
        AvgWait/=simTable.Sim_Table.size();
        // probabilities of ordinary and distinguished to wait in a queue
        ordWaitProb=ordWC/(simTable.Sim_Table.size()/2);
        DisWaitProb=vipWC/(simTable.Sim_Table.size()/2);
        avgServOrd/=(simTable.Sim_Table.size()/2);
        avgServVip/=(simTable.Sim_Table.size()/2);
        IdlePortion/=simTable.Sim_Table.size();
        //next Jframe
        // avg interarrival
        double avgia=0;
        for (int i = 0; i < simTable.Sim_Table.size(); i++) 
        {
            if(simTable.Sim_Table.get(i).CustomerType.equals("distinguished"))
            {
                avgia+=(simTable.Sim_Table.get(i).interArrival)*simTable.Sim_Table.get(i).interArrivalProbability;
            }
            avgia/=simTable.Sim_Table.size();
        }
        AvgShow avg= new AvgShow();
        avg.setVals(AvgServ, AvgOrdWait, AvgDisWait, AvgWait, ordWaitProb, DisWaitProb, IdlePortion,ordc2,vipc2,avgia,avgServOrd,avgServVip,ordWC+vipWC);
        avg.setVisible(true);
//        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulation_Tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulation_Tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulation_Tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulation_Tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulation_Tab().setVisible(true);
            }
        });
    }
    public void view(int cn)
    {
        //initiating distinguished and ordinary arrival class to calculate cumulative probability and the range
        vipArrival va=new vipArrival();
        va.initiate_vip_arr();
        va.cumProb_and_range();
        ordinary_arrival oa=new ordinary_arrival();
        oa.initiate_ordinary_arr();
        oa.cumProb_and_range();
        
        /*initiating distinguished and ordinary customers accordinf to the input and getting their interarrival and 
        sevice time from tables generated above*/
        Ordinary_Cust oc=new Ordinary_Cust();
        oc.ord_rand_interArr_service(oa,cn);
        vip_cust vipc= new vip_cust();
        vipc.vip_rand_interArr_service(va,cn);
        
        //generating simulation table according to the teller rules sateted in the problem
        simulation_table st= new simulation_table();
        st.sim_Table(vipc, oc,cn);
        simTable=st;
        try{
            //showing simulation table in GUI table
            DefaultTableModel model =new DefaultTableModel();
            model=(DefaultTableModel) jTable1.getModel();
            for(int i=0;i<st.Sim_Table.size();i++)
            {
                model.insertRow(i,new Object[]{
                    st.Sim_Table.get(i).customer,
                    st.Sim_Table.get(i).interArrival,
                    st.Sim_Table.get(i).arrivalTime,
                    st.Sim_Table.get(i).ServiceTime,
                    st.Sim_Table.get(i).TimeServiceBegin,
                    st.Sim_Table.get(i).WaitingTime,
                    st.Sim_Table.get(i).TimeServiceEnd,
                    st.Sim_Table.get(i).TimeSpentInSystem,
                    st.Sim_Table.get(i).IDLE_Time,
                    st.Sim_Table.get(i).CustomerType});
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
    public void display(simulation_table st,int cn)
    {
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
